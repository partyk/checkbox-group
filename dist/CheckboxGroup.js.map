{"version":3,"sources":["CheckboxGroup.js"],"names":["CheckboxGroup","options","_classCallCheck","this","_objectSpread","class","firstInit","init","_this","document","addEventListener","e","handleChange","_this2","elements","getElementsByClassName","length","element","_a","slice","call","_i","changeWrapperClass","target","classList","contains","input","groupId","getAttribute","selectAll","checked","checkGroup","groupName","status","_this3","_a2","_i2","closest","concat","changeStatus","triggerChange","querySelector","groupWrapper","groupWrapperClass","toggleClass","elementId","checkGroupSkip","querySelectorAll","elementsChecked","filter","className","arguments","undefined","add","remove","event","initEvent","dispatchEvent"],"mappings":"mwBAAqBA,aAIjB,SAAAA,EAAYC,gGAASC,CAAAC,KAAAH,GACjBG,KAAKF,scAALG,CAAA,GACO,CACCC,MAAO,iBACPC,WAAW,GAEZL,GAEPE,KAAKI,6DAGF,IAAAC,EAAAL,KACHM,SAASC,iBAAiB,SAAU,SAACC,GACjCH,EAAKI,aAAaD,KAEtBR,KAAKG,gDAGG,IAAAO,EAAAV,KACR,GAAKA,KAAKF,QAAQK,UAAlB,CAGA,IAAMQ,EAAWL,SAASM,uBAAuBZ,KAAKF,QAAQI,OAC9D,GAAwB,IAApBS,EAASE,OALL,IAAA,IAQwBC,EARxBC,EAQR,GAAGC,MAAMC,KAAKN,GARNO,EAAA,EAAAA,EAAAH,EAAAF,OAAAK,IAQwBJ,EARxBC,EAAAG,GAQmCR,EAAKS,mBAAmBL,yCAM1DN,GACLA,EAAEY,OAAOC,UAAUC,SAAStB,KAAKF,QAAQI,QArChCL,KAAAA,OAsCGW,EAAEY,uCAlCDG,GA0CjB,IAAMC,EAAUD,EAAME,aAAa,iBAzC9B3B,EAALyB,EAAAE,aACO,mBAECtB,EAEDL,KALP4B,UAAAF,EAAAD,EAAAI,UAQH3B,KAAA4B,WAAAC,GAwCO7B,KAAKmB,mBAAmBI,sCArC5BM,EAAAC,GAAA,IAAA,IAGAhB,EAHAiB,EAAA/B,KAAAgC,EAGA1B,SAAKH,iBAAL,0BAAA0B,EAAA,MAHAI,EAAA,EAAAA,EAAAD,EAAAnB,OAAAoB,KAGAnB,EAHAkB,EAAAC,IAIHC,QAAA,8BAAAC,OAAAN,EAAA,SA8COE,EAAKK,aAAatB,EA5CdgB,GAAAC,EAAAZ,mBAAAL,IACRd,KAAKqC,cAAalC,SAAlBmC,cAA6B,wBAAAT,EAAA,kDAIhBhB,GACT,IAAA0B,EAAAhB,EAAAE,aAAA,sBACHe,EAAAjB,EAAAE,aAAA,4BAPOc,GAQCtB,EAAKN,QARN4B,GA0DJvC,KAAKyC,YAAYlB,EAAMW,QAAQK,GAAeC,EAAmBjB,EAAMI,SAlDpC3B,KAAIyC,YAAKtB,EAAAA,cAALqB,EAAJjB,EAAAI,8CAC1CJ,EAAAO,GAEDP,EAAAI,QAAAG,EA2DI9B,KAAKqC,cAAcd,sCAvDbH,GACF,IAAAsB,EAActB,SAAdkB,cAAA,wBAAAT,EAAA,MACHlB,EAAAX,KAAA2C,eAAArC,SAAAsC,iBAAA,0BAAAf,EAAA,MAAAA,GACJgB,EAAA7C,KAAA2C,eAAArC,SAAAsC,iBAAA,kCAAAf,EAAA,MAAAA,GAED7B,KAAAoC,aAAAM,EAAA/B,EAAAE,SAAAgC,EAAAhC,+CAIiBF,EAASc,GACtB,OAAMI,EAAAA,GAAiBiB,OAACrB,SAAAA,GAgEpB,IAAIX,EAAQoB,QAAR,8BAAAC,OAA8CN,EAA9C,OA9DR,OAEOf,wCAwECA,GAAsC,IAA7BiC,EAA6B,EAAAC,UAAAnC,aAAAoC,IAAAD,UAAA,GAAAA,UAAA,GAAjB,GAAiB,EAAAA,UAAAnC,aAAAoC,IAAAD,UAAA,IAAAA,UAAA,GAE1ClC,EAAQO,UAAU6B,IAAIH,GAhEDjC,EAAAO,UAAA8B,OAAAJ,yCAIpBxB,GAED,IAAA6B,EAAKjC,SAAAA,YAAL,SACHiC,EAPwBC,UAAA,wBAAA,GAAA,GA+EzB9B,EAAM+B,cAAcF","file":"CheckboxGroup.js","sourcesContent":["export default class CheckboxGroup {\r\n    /**\r\n     * @param options {{}}\r\n     */\r\n    constructor(options) {\r\n        this.options = {\r\n            ...{\r\n                class: 'checkbox-group',\r\n                firstInit: true\r\n            },\r\n            ...options\r\n        };\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        document.addEventListener('change', (e) => {\r\n            this.handleChange(e);\r\n        });\r\n        this.firstInit();\r\n    }\r\n\r\n    firstInit() {\r\n        if (!this.options.firstInit) {\r\n            return;\r\n        }\r\n        const elements = document.getElementsByClassName(this.options.class);\r\n        if (elements.length === 0) {\r\n            return;\r\n        }\r\n        [].slice.call(elements).forEach(element => this.changeWrapperClass(element));\r\n    }\r\n\r\n    /**\r\n     * @param e {Event}\r\n     */\r\n    handleChange(e) {\r\n        if (e.target.classList.contains(this.options.class)) {\r\n            this.change(e.target);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param input {HTMLInputElement}\r\n     */\r\n    change(input) {\r\n        const groupId = input.getAttribute('data-group-id');\r\n        const groupName = input.getAttribute('data-group-name');\r\n\r\n        if (groupId) {\r\n            this.selectAll(groupId, input.checked);\r\n        } else {\r\n            this.checkGroup(groupName);\r\n            this.changeWrapperClass(input);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param groupName {String}\r\n     * @param status {Boolean}\r\n     */\r\n    selectAll(groupName, status) {\r\n        document.querySelectorAll('input[data-group-name=\"' + groupName + '\"]').forEach((element) => {\r\n            if (element.closest(`[data-checkbox-group-skip='${groupName}']`)) {\r\n                return;\r\n            }\r\n            this.changeStatus(element, status);\r\n            this.changeWrapperClass(element);\r\n        });\r\n        this.triggerChange(document.querySelector('input[data-group-id=\"' + groupName + '\"]'));\r\n    }\r\n\r\n    /**\r\n     * @param input {HTMLInputElement}\r\n     */\r\n    changeWrapperClass(input) {\r\n        const groupWrapper = input.getAttribute('data-group-wrapper');\r\n        const groupWrapperClass = input.getAttribute('data-group-wrapper-class');\r\n\r\n        if (groupWrapper && input.closest(groupWrapper)) {\r\n            this.toggleClass(input.closest(groupWrapper), groupWrapperClass, input.checked);\r\n        } else {\r\n            this.toggleClass(input.parentElement, groupWrapperClass, input.checked);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param input {HTMLInputElement}\r\n     * @param status {Boolean}\r\n     */\r\n    changeStatus(input, status) {\r\n        input.checked = status;\r\n        this.triggerChange(input);\r\n    }\r\n\r\n    /**\r\n     * @param groupName {String}\r\n     */\r\n    checkGroup(groupName) {\r\n        const elementId = document.querySelector('input[data-group-id=\"' + groupName + '\"]');\r\n        const elements = this.checkGroupSkip(document.querySelectorAll('input[data-group-name=\"' + groupName + '\"]'), groupName);\r\n        const elementsChecked = this.checkGroupSkip(document.querySelectorAll('input:checked[data-group-name=\"' + groupName + '\"]'), groupName);\r\n        this.changeStatus(elementId, elements.length === elementsChecked.length);\r\n    }\r\n\r\n    /**\r\n     * @param elements {NodeList}\r\n     * @param groupName {String}\r\n     */\r\n    checkGroupSkip(elements, groupName) {\r\n        return [...elements].filter(element => {\r\n            if (element.closest(`[data-checkbox-group-skip='${groupName}']`)) {\r\n                return;\r\n            }\r\n            return element;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param element {HTMLElement}\r\n     * @param className {String}\r\n     * @param add {boolean|null}\r\n     */\r\n    toggleClass(element, className = '', add = false) {\r\n        if (add) {\r\n            element.classList.add(className);\r\n        } else {\r\n            element.classList.remove(className);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param input {HTMLInputElement}\r\n     */\r\n    triggerChange(input) {\r\n        // without explorer\r\n        // const event = new Event('change');\r\n        // input.dispatchEvent(event);\r\n        const event = document.createEvent('Event');\r\n        event.initEvent('checkBoxGroup:change', true, true); // can bubble, and is cancellable\r\n        input.dispatchEvent(event);\r\n    }\r\n}\r\n"]}