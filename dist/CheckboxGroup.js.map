{"version":3,"sources":["CheckboxGroup.js"],"names":["CheckboxGroup","options","_classCallCheck","this","_objectSpread","class","init","_this","document","addEventListener","e","handleChange","target","classList","contains","change","input","groupId","getAttribute","groupName","selectAll","checked","checkGroup","status","_this2","_a","querySelectorAll","_i","length","changeStatus","triggerChange","querySelector","elementId","elements","elementsChecked","event","createEvent","initEvent","dispatchEvent"],"mappings":"8aAAqBA,aACjB,SAAAA,EAAYC,gGAASC,CAAAC,KAAAH,GACjBG,KAAKF,scAALG,CAAA,GACO,CACCC,MAAO,kBAERJ,GAEPE,KAAKG,6DAEF,IAAAC,EAAAJ,KACHK,SAASC,iBAAiB,SAAU,SAACC,GACjCH,EAAKI,aAAaD,0CAGbA,GACLA,EAAEE,OAAOC,UAAUC,SAASX,KAAKF,QAAQI,QACzCF,KAAKY,OAAOL,EAAEE,uCAGfI,GACH,IAAMC,EAAUD,EAAME,aAAa,iBAC7BC,EAAYH,EAAME,aAAa,mBAEjCD,EACAd,KAAKiB,UAAUH,EAASD,EAAMK,SAE9BlB,KAAKmB,WAAWH,qCA3BPnB,EA8BIuB,GAAQ,IAAA,IACwDb,EADxDc,EAAArB,KAAAsB,EACzBjB,SAASkB,iBAAiB,0BAA4BP,EAAY,MADzCQ,EAAA,EAAAA,EAAAF,EAAAG,OAAAD,IACwDjB,EADxDe,EAAAE,GAErBH,EAAKK,aAAanB,EAAGa,GA/BRpB,KAAA2B,cAAAtB,SAAAuB,cAAA,wBAAAZ,EAAA,4CACZlB,EAALsB,GAEQlB,EAAKgB,QAAEE,EAFfpB,KAIOF,cAJPe,sCAOHG,GAgCG,IAAMa,EAAYxB,SAASuB,cAAc,wBAA0BZ,EAAY,MACzEc,EAAWzB,SAASkB,iBAAiB,0BAA4BP,EAAY,MAC7Ee,EAAkB1B,SAASkB,iBAAiB,kCAAoCP,EAAY,MAClGhB,KAAK0B,aAAaG,EAlCfC,EAAAL,SAAAM,EAAAN,8CAoCOZ,GAKV,IAAMmB,EAAQ3B,SAAS4B,YAAY,SACnCD,EAAME,UAAU,wBAAwB,GAAM,GAC9CrB,EAAMsB,cAAcH","file":"CheckboxGroup.js","sourcesContent":["export default class CheckboxGroup {\r\n    constructor(options) {\r\n        this.options = {\r\n            ...{\r\n                class: 'checkbox-group'\r\n            },\r\n            ...options\r\n        };\r\n        this.init();\r\n    }\r\n    init() {\r\n        document.addEventListener('change', (e) => {\r\n            this.handleChange(e);\r\n        });\r\n    }\r\n    handleChange(e) {\r\n        if (e.target.classList.contains(this.options.class)) {\r\n            this.change(e.target);\r\n        }\r\n    }\r\n    change(input) {\r\n        const groupId = input.getAttribute('data-group-id');\r\n        const groupName = input.getAttribute('data-group-name');\r\n\r\n        if (groupId) {\r\n            this.selectAll(groupId, input.checked);\r\n        } else {\r\n            this.checkGroup(groupName);\r\n        }\r\n    }\r\n    selectAll(groupName, status) {\r\n        document.querySelectorAll('input[data-group-name=\"' + groupName + '\"]').forEach((e) => {\r\n            this.changeStatus(e, status);\r\n        });\r\n        this.triggerChange(document.querySelector('input[data-group-id=\"' + groupName + '\"]'));\r\n    }\r\n    changeStatus(input, status) {\r\n        input.checked = status;\r\n        this.triggerChange(input);\r\n    }\r\n    checkGroup(groupName) {\r\n        const elementId = document.querySelector('input[data-group-id=\"' + groupName + '\"]');\r\n        const elements = document.querySelectorAll('input[data-group-name=\"' + groupName + '\"]');\r\n        const elementsChecked = document.querySelectorAll('input:checked[data-group-name=\"' + groupName + '\"]');\r\n        this.changeStatus(elementId, elements.length === elementsChecked.length);\r\n    }\r\n    triggerChange(input) {\r\n        // without explorer\r\n        // const event = new Event('change');\r\n        // input.dispatchEvent(event);\r\n\r\n        const event = document.createEvent('Event');\r\n        event.initEvent('checkBoxGroup:change', true, true); // can bubble, and is cancellable\r\n        input.dispatchEvent(event);\r\n    }\r\n}"]}